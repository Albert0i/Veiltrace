// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model ImageTrace {
  id          Int    @id @default(autoincrement())
  imageName   String
  fullPath    String
  fileFormat  String
  fileSize    Int
  meta        String @db.Text // Optional metadata, tags, or symbolic notes
  description String @db.Text // Symbolic summary or generated trace
  miniature   Bytes? // 256×256 thumbnail stored as binary

  visited     Int     @default(0)
  updatedAt   String? // ISO format: "2025-09-01T08:10:11.862Z"
  indexedAt   String // ISO format: "2025-09-01T08:10:11.862Z"
  createdAt   String // ISO format: "2025-09-01T08:10:11.862Z"
  updateIdent Int     @default(0)

  vistas VistaTrace[] // ← One-to-many relationship

  @@unique([fullPath], map: "uniq_image_fullpath")
  @@index([fileFormat], map: "idx_image_format")
  @@index([createdAt], map: "idx_image_created")
  @@index([visited], map: "idx_image_visited")
  @@fulltext([description], map: "fts_image_description")
}

model VistaTrace {
  id Int @id @default(autoincrement())

  image   ImageTrace @relation(fields: [imageId], references: [id], onDelete: Cascade)
  imageId Int

  createdAt   String // ISO format: "2025-09-01T08:10:11.862Z"
  updateIdent Int    @default(0)

  @@index([imageId], map: "idx_vista_image_ref")
}
