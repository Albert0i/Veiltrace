<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Veiltrace Image</title>
    <link rel="icon" type="image/x-icon" href="/favicon.ico">
    <script src="/assets/tailwind.js"></script>
  </head>
  <body class="bg-gray-50 text-gray-900">

    <div class="max-w-7xl mx-auto pt-6 pb-2 px-6">
      <!-- Header -->
      <header class="mb-4 text-center cursor-pointer" onclick="location.reload()">
        <h1 class="text-3xl font-serif font-semibold tracking-tight">Veiltrace Image</h1>
      </header>
  
      <!-- Main Content -->
      <main class="max-w-3xl mx-auto px-4 py-0 space-y-2">
  
        <!-- Image Display Section -->
        <section class="text-center">
          <!-- Image Container -->
          <div id="image-container" class="overflow-hidden relative inline-block w-full max-w-4xl mx-auto">
            <img id="veiltrace-image"
                src="/api/v1/image/view/<%= id %>"
                alt="Veiltrace Image"
                class="rounded-lg shadow max-w-full h-auto transition-transform duration-300 select-none"
                draggable="false">
          </div>

          <!-- Interaction Controls -->
          <div class="mt-4 flex flex-col items-center space-y-3">
            <!-- Zoom Slider -->
            <div class="flex items-center space-x-2">
              <input type="range" id="zoom-slider" min="100" max="500" value="100" class="w-64">
              <span id="zoom-percent" class="text-sm text-gray-600">Zoom: 100%</span>
            </div>

            <!-- Action Buttons -->
            <div class="flex space-x-4">
              <button id="rotate-btn"
                      class="px-4 py-1 text-sm bg-gray-700 text-white rounded hover:bg-gray-800 transition">
                Rotate
              </button>
              <a href="/api/v1/image/view/<%= id %>" download="<%= imageName %>"
                class="px-4 py-1 text-sm bg-gray-700 text-white rounded hover:bg-gray-800 transition">
                Download
              </a>
            </div>
          </div>
        </section>

        <!-- Viewer Script -->
        <script>
          const image = document.getElementById('veiltrace-image');
          const container = document.getElementById('image-container');
          const slider = document.getElementById('zoom-slider');
          const zoomText = document.getElementById('zoom-percent');

          let scale = 1;
          let rotation = 0;
          let isDragging = false;
          let startX, startY;
          let currentX = 0, currentY = 0;

          function updateTransform() {
            image.style.transform = `scale(${scale}) rotate(${rotation}deg) translate(${currentX}px, ${currentY}px)`;
            image.style.cursor = scale > 1 ? (isDragging ? 'grabbing' : 'grab') : 'default';
          }

          function clampTranslation() {
            const containerRect = container.getBoundingClientRect();
            const isRotated = rotation % 180 !== 0;

            const scaledWidth = (isRotated ? image.naturalHeight : image.naturalWidth) * scale;
            const scaledHeight = (isRotated ? image.naturalWidth : image.naturalHeight) * scale;

            const maxOffsetX = Math.max(0, (scaledWidth - containerRect.width) / 2);
            const maxOffsetY = Math.max(0, (scaledHeight - containerRect.height) / 2);

            currentX = Math.min(maxOffsetX, Math.max(-maxOffsetX, currentX));
            currentY = Math.min(maxOffsetY, Math.max(-maxOffsetY, currentY));
          }

          // Zoom via slider
          slider.addEventListener('input', () => {
            scale = slider.value / 100;
            zoomText.textContent = `Zoom: ${slider.value}%`;
            currentX = 0;
            currentY = 0;
            updateTransform();
          });

          // Zoom via scroll
          image.addEventListener('wheel', (e) => {
            const delta = e.deltaY;
            const newScale = scale + delta * -0.001;

            if ((delta < 0 && scale >= 5) || (delta > 0 && scale <= 1)) return;

            e.preventDefault();
            scale = Math.max(1, Math.min(newScale, 5));
            slider.value = Math.round(scale * 100);
            zoomText.textContent = `Zoom: ${slider.value}%`;
            currentX = 0;
            currentY = 0;
            updateTransform();
          });

          // Rotate
          document.getElementById('rotate-btn').addEventListener('click', () => {
            rotation = (rotation + 90) % 360;
            currentX = 0;
            currentY = 0;
            updateTransform();
          });

          // Drag-to-pan with rotation-aware logic and strict containment
          image.addEventListener('mousedown', (e) => {
            if (scale > 1) {
              isDragging = true;
              startX = e.clientX;
              startY = e.clientY;
              image.style.cursor = 'grabbing';
              image.style.transition = 'none';
            }
          });

          document.addEventListener('mouseup', () => {
            isDragging = false;
            image.style.cursor = scale > 1 ? 'grab' : 'default';
            image.style.transition = 'transform 0.3s';
          });

          document.addEventListener('mousemove', (e) => {
            if (!isDragging) return;

            const dx = e.clientX - startX;
            const dy = e.clientY - startY;

            let rotatedX = dx;
            let rotatedY = dy;

            switch (rotation) {
              case 90:
                rotatedX = dy;
                rotatedY = -dx;
                break;
              case 180:
                rotatedX = -dx;
                rotatedY = -dy;
                break;
              case 270:
                rotatedX = -dy;
                rotatedY = dx;
                break;
            }

            currentX += rotatedX;
            currentY += rotatedY;
            startX = e.clientX;
            startY = e.clientY;

            clampTranslation();
            updateTransform();
          });
        </script>

        <!-- Metadata -->
        <section class="bg-white rounded-lg shadow p-2 space-y-1 text-md">
          <h2 class="text-lg font-semibold text-black mb-2">Image Details</h2>

          <div><span class="font-medium text-gray-900">Id:</span> <%= id %></div>
          <div><span class="font-medium text-gray-900">Name:</span> <%= imageName %></div>
          <div><span class="font-medium text-gray-900">Format:</span> <%= fileFormat %></div>
          <div><span class="font-medium text-gray-900">Size:</span> <%= fileSize %> KB</div>
          <div><span class="font-medium text-gray-900">Path:</span> <%= fullPath %></div>

          <div><span class="font-medium text-gray-900">Meta:</span> <br /><%- meta.replace(/\n/g, "<br />")
            %></div>
          <div><span class="font-medium text-gray-900">Description:</span> <br /><%- description.replace(/\n/g, "<br />")
            %></div>

          <div><span class="font-medium text-gray-900">Visited:</span> <%= visited %></div>
          <div><span class="font-medium text-gray-900">Updated At:</span> <%= updatedAt || '—' %></div>
          <div><span class="font-medium text-gray-900">Indexed At:</span> <%= indexedAt %></div>
          <div><span class="font-medium text-gray-900">Created At:</span> <%= createdAt %></div>

        </section>
  
        <!-- Vistas -->
        <section class="bg-white rounded-lg shadow p-2 space-y-1 text-sm">
          <h2 class="text-lg font-semibold text-black mb-2">Vista Trace</h2>

          <ul class="list-none space-y-1 text-sm text-gray-900">
            <% vistas.forEach((vista, index) => { %>
              <li>
                <strong>
                  <%= vistas.length - index %>
                </strong> . 
                <%= vista.type.charAt(0).toUpperCase() + vista.type.slice(1) %> — <%= vista.createdAt %>
              </li>
            <% }) %>
          </ul>
        </section>
  
        <!-- Archives -->
        <section class="bg-white rounded-lg shadow p-2 space-y-1 text-sm">
          <h2 class="text-lg font-semibold text-black mb-2">Archive Trace</h2>

          <ul class="list-none space-y-1 text-sm text-gray-900">
            <% archives.forEach((archive, index) => { %>
              <li>
                <strong><%= index + 1 %></strong> .
                <a href="/archive/<%= archive.id %>" target="_blank"
                   class="text-blue-600 underline hover:text-blue-800 transition">
                  <%= archive.description %> — <%= archive.createdAt %>
                </a>
              </li>
            <% }) %>
          </ul>
        </section>

      </main>
    </div>

    <!-- Close Button -->
    <!-- <div class="text-center m-4">
      <a href="/" class="inline-block px-6 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 transition">
        Close
      </a>
    </div> -->
    <div class="flex justify-center items-center h-12">
      <button onclick="window.close()"
              class="inline-block px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 transition cursor-pointer">
        Close
      </button>
    </div>

    <!-- Copilot Credit -->
    <footer class="m-4 text-center text-sm text-gray-700">
        <p>
        Crafted in quiet partnership with  
        <a href="https://copilot.microsoft.com" target="_blank" class="text-blue-600 font-semibold hover:underline">
            Microsoft Copilot
        </a> — <br />your poetic companion in code, ritual, and breath. Veiltrace. All traces remembered.
        </p>
    </footer>

  </body>
</html>